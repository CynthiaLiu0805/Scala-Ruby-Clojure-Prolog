<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2020-10-20 Tue 17:57 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Computer Science 3MI3 – 2020 Assignment 1: A language of expressions</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Cynthia Liu" />
<meta name="description" content="A demonstration of how to represent tree-like data in Prolog."
 />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Computer Science 3MI3 – 2020 Assignment 1: A language of expressions</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Introduction">1. Introduction</a></li>
<li><a href="#Part one: Interpreter written in Scala">2. Part one: Interpreter written in Scala</a>
<ul>
<li><a href="#Representation">2.1. Representation</a></li>
<li><a href="#Interpreter">2.2. Interpreter</a></li>
</ul>
</li>
<li><a href="#Part two: Interpreter written in Prolog">3. Part two: Interpreter written in Prolog</a>
<ul>
<li><a href="#Expression recongniser">3.1. Expression recongniser</a></li>
<li><a href="#Interpreter">3.2. Interpreter</a></li>
</ul>
</li>
<li><a href="#Part three: Variables and substitution">4. Part three: Variables and substitution</a>
<ul>
<li><a href="#Scala implementation">4.1. Scala implementation</a>
<ul>
<li><a href="#VarExpr">4.1.1. VarExpr</a></li>
<li><a href="#interpretVarExpr">4.1.2. interpretVarExpr</a></li>
</ul>
</li>
<li><a href="#Prolog implementation">4.2. Prolog implementation</a>
<ul>
<li><a href="#isVarExpr">4.2.1. isVarExpr</a></li>
<li><a href="#interpretVarExpr">4.2.2. interpretVarExpr</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#Part four: Boolean expressions">5. Part four</a>
<ul>
<li><a href="#Scala implementation">5.1. Scala implementation</a>
<ul>
<li><a href="#MixedExpr">5.1.1. MixedExpr</a></li>
<li><a href="#interpretMixedExpr">5.1.2. interpretMixedExpr</a></li>
</ul>
</li>
<li><a href="#Prolog implementation">5.2. Prolog implementation</a>
<ul>
<li><a href="#isMixedExpr">5.2.1. isMixedExpr</a></li>
<li><a href="#interpretVarExpr">5.2.2. interpretVarExpr</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgf1267cf" class="outline-2">
<h2 id="Introduction"><span class="section-number-2">1</span> Introduction</h2>
<div class="outline-text-2" id="text-Introduction">
<p>
This is the documentation for Assignment 1 for COMPSCI3MI3 2020fall. 
</p>

<p>
It is about an expression language consisting of integer constants and seven prefix operators, 
like negation, absolute value, plus, times, minus, and exponent. 
</p>

<p>
Also, base on that, implementing variables and substitution, as well as boolean expressions.
</p>

<p>
This Assignment is written in both Scala and Prolog. 
</p>
</div>
</div>

<div id="outline-container-org3893687" class="outline-2">
<h2 id="Part one: Interpreter written in Scala"><span class="section-number-2">2</span> Part one: Interpreter written in Scala</h2>
<div class="outline-text-2" id="text-Part one: Interpreter written in Scala">
</div>

<div id="outline-container-orgd1c2ce5" class="outline-3">
<h3 id="Representation"><span class="section-number-3">2.1</span> Representation</h3>
<div class="outline-text-3" id="text-Representation">
<p>
The integer constants and operators are expressed in the new type <code>Expr</code>.
</p>
<ul class="org-ul">
<li>The constructor <code>Const</code> take a parameter of type <code>Int</code>.</li>
<li>The constructor <code>Neg</code> and <code>Abs</code> take a parameter of type <code>Expr</code>.</li>
<li>The constructor <code>Minus</code>, <code>Plus</code>, <code>Times</code> and <code>Exp</code> take two parameters of type <code>Expr</code>.</li>
</ul>
<div class="org-src-container">
<pre class="src src-amm">sealed trait Expr
case class Const[A](value:Int) extends Expr
case class Neg[A](value:Expr) extends Expr
case class Abs[A](value:Expr) extends Expr
case class Minus[A](value1:Expr, value2:Expr) extends Expr
case class Plus[A](Tvalue1:Expr, value2:Expr) extends Expr
case class Times[A](value1:Expr, value2:Expr) extends Expr
case class Exp[A](value1:Expr, value2:Expr) extends Expr
</pre>
</div>
</div>
</div>

<div id="outline-container-org95d6fa8" class="outline-3">
<h3 id="Interpreter"><span class="section-number-3">2.2</span> Interpreter</h3>
<div class="outline-text-3" id="text-Interpreter">
<p>
The <code>interpreterExpr</code> method calculates the value of an <code>Expr</code>.
</p>
<ul class="org-ul">
<li>If the input is a Const, the value of Const is returned directly.</li>
<li>Else, take the value of <code>Expr</code> into recursion and perform the math operation on result of recursion.</li>
</ul>
<div class="org-src-container">
<pre class="src src-amm">def interpretExpr(value:Expr):Int = value match{
    case Const(value) =&gt; value
    case Abs(value) =&gt; interpretExpr(value).abs
    case Minus(value1, value2) =&gt; interpretExpr(value1)-interpretExpr(value2)
    case Neg(value) =&gt; interpretExpr(value)*(-1)
    case Plus(value1, value2) =&gt; interpretExpr(value2)+interpretExpr(value1)
    case Times(value1, value2) =&gt; interpretExpr(value1)*interpretExpr(value2)
    case Exp(value1, value2) =&gt; Math.pow(interpretExpr(value1),interpretExpr(value2)).toInt
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org8a95dc7" class="outline-2">
<h2 id="Part two: Interpreter written in Prolog"><span class="section-number-2">3</span> Part two: Interpreter written in Prolog</h2>
<div class="outline-text-2" id="text-Part two: Interpreter written in Prolog">
</div>

<div id="outline-container-org547c803" class="outline-3">
<h3 id="Expression recongniser"><span class="section-number-3">3.1</span> Expression recongniser</h3>
<div class="outline-text-3" id="text-Expression recongniser">
<p>
The predicate <code>isExpr</code> recongnises expression as: 
</p>
<div class="org-src-container">
<pre class="src src-prolog">isExpr(constE(A)).
isExpr(plusE(A,B)).
</pre>
</div>
</div>
</div>

<div id="outline-container-org67b2dac" class="outline-3">
<h3 id="Interpreter"><span class="section-number-3">3.2</span> Interpreter</h3>
<div class="outline-text-3" id="text-Interpreter">
<p>
The <code>interpretExpr</code> predicate relates the expression to their numerical values.
</p>

<p>
Similarly to the one in Scala, if the expression is <code>constE(A)</code>, the value A is returned directly.
</p>

<p>
Else, take the value into another <code>interpretExpr</code> predicate again and apply the math operation to the result of the recursion.
</p>
<div class="org-src-container">
<pre class="src src-amm">interpretExpr(constE(A),X) :- X is A.
interpretExpr(absE(A),X) :- interpretExpr(A,X1),X is abs(X1).
interpretExpr(plusE(A,B),X) :- interpretExpr(A,X1),interpretExpr(B,X2), X is X1+X2.
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org311267f" class="outline-2">
<h2 id="Part three: Variables and substitution"><span class="section-number-2">4</span> Part three: Variables and substitution</h2>
<div class="outline-text-2" id="text-Part three: Variables and substitution">
</div>

<div id="outline-container-orgd861e54" class="outline-3">
<h3 id="Scala implementation"><span class="section-number-3">4.1</span> Scala implementation</h3>
<div class="outline-text-3" id="text-Scala implementation">
</div>

<div id="outline-container-orgfa8bc5e" class="outline-4">
<h4 id="VarExpr"><span class="section-number-4">4.1.1</span> VarExpr</h4>
<div class="outline-text-4" id="text-VarExpr">
<p>
The new algebraic datatype <code>VarExpr</code> includes the constructors from <code>Expr</code> with two new constructors <code>Var</code> and <code>Subst</code>.
</p>

<p>
For <code>Subst</code>, the first parameter is the expression to perform the substitution on, usually include the <code>Var</code> constructor.
The second parameter is the variable to be substituted, here represented by Symbol type.
The third parameter the expression to substitute for the variable.
</p>

<div class="org-src-container">
<pre class="src src-scala">case class Var[A](value:Symbol) extends VarExpr
case class Subst[A](value1:VarExpr, value2:A, value3:VarExpr) extends VarExpr                                                                                                                                                                                                                                                              
</pre>
</div>
</div>
</div>

<div id="outline-container-orgec8353f" class="outline-4">
<h4 id="interpretVarExpr"><span class="section-number-4">4.1.2</span> interpretVarExpr</h4>
<div class="outline-text-4" id="text-interpretVarExpr">
<p>
The <code>interpretVarExpr</code> method is similar to the interpretExpr method. 
Besides the case of <code>Subst</code>, other cases are basically same as the one in <code>interpretExpr</code>.
For <code>Subst</code>, a helper method <code>subhelp</code> is used to do the substitution:
</p>
<div class="org-src-container">
<pre class="src src-scala">case Subst(value1, value2, value3) =&gt; interpretVarExpr(subhelp(value1, value2,value3))                                                                                                                                                  
</pre>
</div>
<p>
Where value1, value2, value3 are the three parameters of <code>Subst</code>.
</p>
</div>

<ol class="org-ol">
<li><a id="org076eb73"></a>helper method: subhelp<br />
<div class="outline-text-5" id="text-4-1-2-1">
<p>
The <code>subhelp</code> method subtitutes the variable into the expression. ie. if the input is 
</p>
<div class="org-src-container">
<pre class="src src-scala">Subst(Subst(Plus(Var('x),Var('y)),'x,Const(5)),'y,Const(4))
</pre>
</div>
<p>
then the output would be
</p>
<div class="org-src-container">
<pre class="src src-scala">Plus(Const(5),Const(4))
</pre>
</div>

<p>
In the <code>subhelp</code> method, for those with only one argument like <code>Var</code>, <code>Abs</code>, <code>Neg</code>, take the expression to be substituted to the <code>VarExpr</code>.
</p>
<div class="org-src-container">
<pre class="src src-scala">case Var(value) =&gt; value_out
case Abs(value) =&gt; Abs(value_out)
case Neg(value) =&gt; Neg(value_out)
</pre>
</div>
<p>
Where <code>value_out</code> is the expression to substitute for the variable.
</p>

<p>
However, for those with two arguments, we need to compared which variable to be substituted into, 
that is, compare the <code>Var</code> and the <code>Symbol</code> by converting them to String. The <code>getSymbol</code> method return <code>Symbol</code> in String form.
A case for <code>Plus</code> is shown below:
</p>
<div class="org-src-container">
<pre class="src src-scala">case Plus(value_first, value_second) if (s_out.toString==getSymbol(value_first)) =&gt; Plus(value_out,value_second)
case Plus(value_first, value_second) if (s_out.toString==getSymbol(value_second)) =&gt; Plus(value_first,value_out)
</pre>
</div>

<p>
For recursion,do the inner recursion first and then the outer one.
</p>
<div class="org-src-container">
<pre class="src src-scala">case Subst(value_inner,s2,value_inner2) =&gt; subhelp(subhelp(value_inner,s2,value_inner2),s_out,value_out)
</pre>
</div>
</div>
</li>
</ol>
</div>
</div>


<div id="outline-container-orge226dd9" class="outline-3">
<h3 id="Prolog implementation"><span class="section-number-3">4.2</span> Prolog implementation</h3>
<div class="outline-text-3" id="text-Prolog implementation">
</div>

<div id="outline-container-orgad9c63a" class="outline-4">
<h4 id="isVarExpr"><span class="section-number-4">4.2.1</span> isVarExpr</h4>
<div class="outline-text-4" id="text-isVarExpr">
<p>
The predicate <code>isVarExpr</code> recongnises expression as: 
</p>
<div class="org-src-container">
<pre class="src src-prolog">isVarExpr(constE(A)).
isVarExpr(plusE(A,B)).
isVarExpr(var(A)).
isVarExpr(subst(A,B,C)).
</pre>
</div>
</div>
</div>

<div id="outline-container-org6fd0ba1" class="outline-4">
<h4 id="interpretVarExpr"><span class="section-number-4">4.2.2</span> interpretVarExpr</h4>
<div class="outline-text-4" id="text-interpretVarExpr">
<p>
The <code>interpretVarExpr</code> predicate is similar to the <code>interpretExpr</code>, for usual math operation, they are basically the same.
When there is substitution, use the helper predicate to simplify the substitution, then put the result into interpretVarExpr predicate
</p>
<div class="org-src-container">
<pre class="src src-prolog">interpretVarExpr(subst(A,B,C),X) :- subhelp(A,B,C,R), interpretVarExpr(R,X).
</pre>
</div>
<p>
Here, <code>A</code>, <code>B</code>, <code>C</code> are the expression to perform the substitution on, the variable to be substituted, the expression to substitute for the variable.
</p>
</div>


<ol class="org-ol">
<li><a id="prolog subhelp"></a>helper predicate subhelp<br />
<div class="outline-text-5" id="text-prolog subhelp">
<p>
The <code>subhelp</code> predicate subtitutes the variable into the expression. ie. if the input is 
</p>
<div class="org-src-container">
<pre class="src src-prolog">subst(subst(plusE(var(x),var(y)),x,constE(5)), y,constE(4))
</pre>
</div>
<p>
Then the output would be:
</p>
<div class="org-src-container">
<pre class="src src-prolog">plusE(constE(5),constE(4))
</pre>
</div>

<p>
In the <code>subhelp</code> predicate, for <code>Var</code>, <code>Abs</code>, <code>Neg</code>, take the expression to be substituted into the <code>VarExpr</code>.
</p>
<div class="org-src-container">
<pre class="src src-prolog">subhelp(var(A),A,C,R) :- R=C.
subhelp(absE(A),C,D,R) :- R=absE(D).
subhelp(negE(A),C,D,R) :- R=negE(D).
</pre>
</div>
<p>
Where <code>D</code> is the expression to substitute for the variable.
</p>

<p>
For those with two arguments, comparsion is needed:
</p>
<div class="org-src-container">
<pre class="src src-prolog">subhelp(plusE(A,B),C,D,R) :- A==var(C) -&gt; R = plusE(D,B).
subhelp(plusE(A,B),C,D,R) :- B==var(C) -&gt; R = plusE(A,D).
</pre>
</div>

<p>
For recursion, do the inner recursion and then the outer recursion.
</p>
<div class="org-src-container">
<pre class="src src-prolog">subhelp(subst(A1,A2,A3),B,C,R) :- subhelp(A1,A2,A3,R1),subhelp(R1,B,C,R).
</pre>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>


<div id="outline-container-org3a6400d" class="outline-2">
<h2 id="Part four: Boolean expressions"><span class="section-number-2">5</span> Part four</h2>
<div class="outline-text-2" id="text-Part four: Boolean expressions">
</div>

<div id="outline-container-orgd3912df" class="outline-3">
<h3 id="Scala implementation"><span class="section-number-3">5.1</span> Scala implementation</h3>
<div class="outline-text-3" id="text-Scala implementation">
</div>

<div id="outline-container-orgd8aaa1c" class="outline-4">
<h4 id="MixedExpr"><span class="section-number-4">5.1.1</span> MixedExpr</h4>
<div class="outline-text-4" id="text-MixedExpr">
<p>
The new algebraic datatype <code>MixedExpr</code> includes the constructors from <code>Expr</code> with new constructors <code>TT</code> , <code>FF</code>, <code>Band</code>, <code>Bor</code>, <code>Bnot</code>.
</p>

<p>
<code>TT</code> and <code>FF</code> take no arguments, so they are implemented as case object, and the other three constructors take <code>MixedExpr</code> as argument.
</p>

<div class="org-src-container">
<pre class="src src-scala">case object TT extends MixedExpr
case object FF extends MixedExpr
case class Band[A](value1:MixedExpr, value2:MixedExpr) extends MixedExpr
case class Bnot[A](value:MixedExpr) extends MixedExpr
case class Bor[A](value1:MixedExpr, value2:MixedExpr) extends MixedExpr                                                                                                                       
</pre>
</div>
</div>
</div>

<div id="outline-container-org30058d5" class="outline-4">
<h4 id="interpretMixedExpr"><span class="section-number-4">5.1.2</span> interpretMixedExpr</h4>
<div class="outline-text-4" id="text-interpretMixedExpr">
<p>
The return type of <code>interpretMixedExpr</code> method is <code>Option[Either[Int, Boolean]]</code>.
In this case, when the method return <code>Int</code>, a <code>Some(Left())</code> need to be added on the result like <code>Some(Left(result))</code>.
When the method return <code>Boolean</code>, a <code>Some(Right())</code> need to be added on the result like <code>Some(Right(result))</code>.
In order to calculate these two different type separately, helper functions <code>interpreterExpr</code> and <code>interpretBoolean</code> is used in <code>interpretMixedExpr</code>.
Also, when the input is <code>TT</code> or <code>FF</code>, <code>true</code> or <code>false</code> is returned directly.
</p>
<div class="org-src-container">
<pre class="src src-scala">case Abs(value) =&gt; Some(Left(interpretExpr(Abs(value))))
case TT =&gt; Some(Right(true))
case FF =&gt; Some(Right(false))
case Band(value1, value2) =&gt; Some(Right(interpretBoolean(Band(value1,value2))))
</pre>
</div>
</div>

<ol class="org-ol">
<li><a id="helper methods for part 4"></a>interpretExpr and interpretBoolean<br />
<div class="outline-text-5" id="text-helper methods for part 4">
<p>
The <code>interpretExpr</code> method is the same as the one in part one, 
and the <code>interpretBoolean</code> is implemented using recursion and logical operators.
</p>
<div class="org-src-container">
<pre class="src src-scala">def interpretBoolean(value:MixedExpr):Boolean = value match {
    case TT =&gt; true
    case FF =&gt; false
    case Band(value1, value2) =&gt; interpretBoolean(value1) &amp;&amp; interpretBoolean(value2)
    case Bnot(value) =&gt; !interpretBoolean(value)
    case Bor(value1, value2) =&gt; interpretBoolean(value1) || interpretBoolean(value2)
}
</pre>
</div>
</div>
</li>
</ol>
</div>
</div>

<div id="outline-container-orga87b483" class="outline-3">
<h3 id="Prolog implementation"><span class="section-number-3">5.2</span> Prolog implementation</h3>
<div class="outline-text-3" id="text-Prolog implementation">
</div>

<div id="outline-container-org6aaf611" class="outline-4">
<h4 id="isMixedExpr"><span class="section-number-4">5.2.1</span> isMixedExpr</h4>
<div class="outline-text-4" id="text-isMixedExpr">
<p>
The predicate ~isMixedExpr ~ recongnises expression as: 
</p>
<div class="org-src-container">
<pre class="src src-prolog">isMixedExpr(constE(A)).
isMixedExpr(plusE(A,B)).
isMixedExpr(tt).
isMixedExpr(ff).
isMixedExpr(band(A,B)).
isMixedExpr(bor(A,B)).
isMixedExpr(bnot(A,B)).
</pre>
</div>
</div>
</div>


<div id="outline-container-org79ebf49" class="outline-4">
<h4 id="interpretVarExpr"><span class="section-number-4">5.2.2</span> interpretVarExpr</h4>
<div class="outline-text-4" id="text-interpretVarExpr">
<p>
The <code>interpretMixedExpr</code> predicate is similar to the <code>interpretExpr</code>, for usual math operation, they are basically the same.
For the new expressions <code>tt</code> and <code>ff</code>, <code>true</code> and <code>false</code> is return directly
</p>
<div class="org-src-container">
<pre class="src src-prolog">interpretMixedExpr(tt,X) :- X = true.
interpretMixedExpr(ff,X) :- X = false.
</pre>
</div>
<p>
For the other three cases, again, recursion is needed.
For example, for <code>bnot(A)</code>, we need to do <code>interpretMixedExpr(A,Y)</code> and then return <code>X</code> according to <code>Y</code>.
</p>
<div class="org-src-container">
<pre class="src src-prolog">interpretMixedExpr(bnot(A),X) :- interpretMixedExpr(A,Y), Y==true -&gt; X = false.
interpretMixedExpr(bnot(A),X) :- interpretMixedExpr(A,Y), Y==false -&gt; X = true.
</pre>
</div>

<p>
Similarly, for the other two cases, we can use logical operator such as <code>;</code>.
</p>
<div class="org-src-container">
<pre class="src src-prolog">interpretMixedExpr(bor(A,B),X) :- interpretMixedExpr(A,Y1), interpretMixedExpr(B,Y2) -&gt; X = Y1;Y2 .
</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Cynthia Liu</p>
<p class="date">Created: 2020-10-20 Tue 17:57</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
